services:
  reverse-proxy:
    container_name: reverse-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "9000:9000"
      - "9001:9001"
      - "9002:9002"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /etc/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - timeswap-auth
      - timeswap-api

  timeswap-auth:
    container_name: timeswap-auth
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:9001
      - ConnectionStrings__DefaultConnection=Host=authdb;Port=5432;Database=TimeSwapAuth;Username=${AUTH_DB_USER};Password=${AUTH_DB_PASSWORD}
      - JWTSettings_SecretKey=${JWT_SECRET}
      - JWTSettings_ValidAudience=${JWT_AUDIENCE}
      - JWTSettings_ValidIssuer=${JWT_ISSUER}
      - JWTSettings_ExpiryInMinutes=${JWT_EXPIRY}
      - FrontendUrl=${FRONTEND_URL}
      - EmailSettings__From=${EMAIL_FROM}
      - EmailSettings__Password=${EMAIL_PASSWORD}
      - Redis__ConnectionString=${REDIS_CONNECTION}
    depends_on:
      - authdb
      - redis

  timeswap-api:
    container_name: timeswap-api
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:9002
      - ConnectionStrings__DefaultConnection=Host=timeswapdb;Port=5432;Database=TimeSwapApi;Username=${CORE_DB_USER};Password=${CORE_DB_PASSWORD}
      - JWTSettings_SecretKey=${JWT_SECRET}
      - JWTSettings_ValidAudience=${JWT_AUDIENCE}
      - JWTSettings_ValidIssuer=${JWT_ISSUER}
      - JWTSettings_ExpiryInMinutes=${JWT_EXPIRY}
      - Redis__ConnectionString=${REDIS_CONNECTION}
    depends_on:
      - timeswapdb
      - redis

  redis:
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  authdb:
    container_name: authdb
    restart: always
    environment:
      - POSTGRES_USER=${AUTH_DB_USER}
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
      - POSTGRES_DB=TimeSwapAuth
    ports:
      - "5432:5432"
    volumes:
      - authdb_data:/var/lib/postgresql/data

  timeswapdb:
    container_name: timeswapdb
    restart: always
    environment:
      - POSTGRES_USER=${CORE_DB_USER}
      - POSTGRES_PASSWORD=${CORE_DB_PASSWORD}
      - POSTGRES_DB=TimeSwapApi
    ports:
      - "5433:5432"
    volumes:
      - timeswapdb_data:/var/lib/postgresql/data

  portainer:
    container_name: portainer
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
